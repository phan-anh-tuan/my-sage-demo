service: my-saga-demo

# Use the serverless-webpack plugin to transpile ES6
plugins:
 - serverless-webpack
 - serverless-dynamodb-local
 - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
 webpack:
  webpackConfig: ./webpack.config.js
  includeModules: true
 ordersTableName: 'orders-table-${self:provider.stage}'
 processedOrderTableName: 'processed-orders-table-${self:provider.stage}'
 inventoryTableName: 'inventory-table-${self:provider.stage}'
 dynamodb:
  start:
   migrate: true

provider:
 name: aws
 runtime: nodejs8.10
 stage: dev
 region: ap-southeast-2
 iamRoleStatements:
  - Effect: Allow
    Action:
    - dynamodb:Query
    - dynamodb:Scan
    - dynamodb:GetItem
    - dynamodb:PutItem
    - dynamodb:UpdateItem
    - dynamodb:DeleteItem
    Resource:
      - { "Fn::GetAtt": ["OrdersDynamoDBTable", "Arn" ] }
      - { "Fn::GetAtt": ["InventoryDynamoDBTable", "Arn" ] }
      - { "Fn::GetAtt": ["ProcessedOrdersDynamoDBTable", "Arn" ] }
  - Effect: Allow
    Action:
    - lambda:InvokeFunction
    Resource: 'arn:aws:lambda:ap-southeast-2:181630946722:function:*'    
 environment:
  ORDERS_TABLE: ${self:custom.ordersTableName}
  PROCESSED_ORDER_TABLE: ${self:custom.processedOrderTableName}
  INVENTORY_TABLE: ${self:custom.inventoryTableName}
functions:
 app:
  handler: index.handler
  events:
   - http: ANY /
   - http: 'ANY {proxy+}'
  
 createAnOrder:
  handler: createOrder.main
  events:
    - http:
        path: api/orders
        method: post
        cors: true
        authorizer: aws_iam
 updateInventory:
  handler: updateInventory.main
  events:
    - http:
        path: api/inventories
        method: post
        cors: true
        authorizer: aws_iam      
 compensateUpdateInventory:
  handler: compensateUpdateInventory.main
  events:
    - http:
        path: api/compensation/inventories
        method: post
        cors: true
        authorizer: aws_iam          
 deleteAnOrder:
  handler: compensateCreateOrder.main
  events:
    - http:
        path: api/orders
        method: delete
        cors: true
        authorizer: aws_iam
resources:
 Resources:
  ProcessedOrdersDynamoDBTable:
   Type: 'AWS::DynamoDB::Table'
   Properties:
    AttributeDefinitions:
     -
      AttributeName: "orderId"
      AttributeType: "S"
     -
      AttributeName: "itemId"
      AttributeType: "S"
    KeySchema:
     -
      AttributeName: "orderId"
      KeyType: "HASH"
     -
      AttributeName: "itemId"
      KeyType: "RANGE"
    ProvisionedThroughput:
     ReadCapacityUnits: 1
     WriteCapacityUnits: 1
    TableName: ${self:custom.processedOrderTableName}    
  InventoryDynamoDBTable:
   Type: 'AWS::DynamoDB::Table'
   Properties:
    AttributeDefinitions:
     -
      AttributeName: "itemId"
      AttributeType: "S"
    KeySchema:
     -
      AttributeName: "itemId"
      KeyType: "HASH"
    ProvisionedThroughput:
     ReadCapacityUnits: 1
     WriteCapacityUnits: 1
    TableName: ${self:custom.inventoryTableName}        
  OrdersDynamoDBTable:
   Type: 'AWS::DynamoDB::Table'
   Properties:
    AttributeDefinitions:
     -
      AttributeName: "orderId"
      AttributeType: "S"
     -
      AttributeName: "version"
      AttributeType: "N"
    KeySchema:
     -
      AttributeName: "orderId"
      KeyType: "HASH"
     -
      AttributeName: "version"
      KeyType: "RANGE"
    ProvisionedThroughput:
     ReadCapacityUnits: 1
     WriteCapacityUnits: 1
    TableName: ${self:custom.ordersTableName}      
    